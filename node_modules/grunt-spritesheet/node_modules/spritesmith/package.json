{
  "name": "spritesmith",
  "version": "0.9.0",
  "description": "Utility that takes images and creates a spritesheet with JSON sprite data",
  "main": "src/smith.js",
  "scripts": {
    "test": "cd src-test && doubleshot --timeout 60000 --outline smith.outline.js --content smith.content.js"
  },
  "keywords": [
    "sprite",
    "spritesheet",
    "css"
  ],
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com"
  },
  "contributors": "Alex Bain <alex@alexba.in",
  "license": "MIT",
  "dependencies": {
    "async": "~0.2.6",
    "layout": "~1.3.0",
    "phantomjssmith": "~0.1.2",
    "gmsmith": "~0.2.0",
    "canvassmith": "~0.1.0"
  },
  "devDependencies": {
    "doubleshot": "~1.0.1",
    "underscore": "~1.4.4"
  },
  "optionalDependencies": {
    "phantomjssmith": "~0.1.2",
    "gmsmith": "~0.2.0",
    "canvassmith": "~0.1.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Ensighten/spritesmith.git"
  },
  "readme": "Spritesmith [![Donate on Gittip](http://badgr.co/gittip/twolfson.png)](https://www.gittip.com/twolfson/)\n===========\nUtility that takes image files and generates [spritesheets](http://en.wikipedia.org/wiki/Sprite_%28computer_graphics%29#Sprites_by_CSS) and coordinate maps.\n\nOnce you have satisfied the [requirements](#requirements), spritesmith can be installed via `npm install spritesmith`.\n\nSpritesmith is also available as a [grunt plugin](https://github.com/Ensighten/grunt-spritesmith).\n\nRequirements\n------------\nSpritesmith supports multiple sprite engines however all of the current engines require external software to be installed.\n\nAs a result, you must either have [PhantomJS][phantomjs], [Cairo](http://cairographics.org/), or [Graphics Magick](http://www.graphicsmagick.org/) installed for Spritesmith to run properly.\n\n[phantomjs]: http://phantomjs.org/\n\n### PhantomJS\nThis depends on having `phantomjs` installed on your machine. For installation instructions, visit [the website][phantomjs]. This module has been tested against `1.9.0`.\n\n### Cairo (node-canvas)\nDue to dependance on [node-canvas](https://github.com/learnboost/node-canvas), you must install [Cairo](http://cairographics.org/).\n\nInstructions on how to do this are provided in the [node-canvas wiki](https://github.com/LearnBoost/node-canvas/wiki/_pages).\n\nAdditionally, you will need to install [node-gyp](https://github.com/TooTallNate/node-gyp/)\n```shell\nsudo npm install -g node-gyp\n```\n\n### Graphics Magick (gm)\n[gm](https://github.com/aheckmann/gm) runs on top of (and depends on) [Graphics Magick](http://www.graphicsmagick.org/).\n\nI have found it is best to install from the site rather than through a package manager (e.g. `apt-get`) to get the latest as well as without transparency issues.\n\nThis module has been developed and tested against `1.3.17`.\n\nDocumentation\n-------------\nSpritesmith is a standalone function\n```\n/**\n * Spritesmith generation function\n * @param {Object} params Parameters for spritesmith\n * @param {String[]} [params.src] Images to generate into sprite sheet\n * @param {String} [params.engine=\"auto\"] Engine to use (phantomjs, canvas, gm, or user-defined via Spritesmith.addEngine)\n * @param {String} [params.algorithm=\"top-down\"] Algorithm to pack images with\n * @param {Mixed} [params.engineOpts] Options to pass through to engine for settings\n * @param {Mixed} [params.exportOpts] Options to pass through to engine for export\n * @param {Function} callback Function that receives compiled spritesheet and map\n * @returns {Mixed} callback[0] err If an error was encountered, this will be returned to callback\n * @returns {Object} callback[1] result Result object of spritesmith\n * @returns {String} callback[1].image Binary string representation of image\n * @returns {Object} callback[1].coordinates Map from file name to an object containing x, y, height, and width information about the source image\n * @returns {Object} callback[1].properties Properties about the spritesheet itself\n * @returns {Object} callback[1].properties.width Width of the spritesheet\n * @returns {Object} callback[1].properties.height Height of the spritesheet\n */\n```\n\n### Canvas export options\nFor the `canvas` engine, the current output options are:\n```\n{\n  'format': 'png' // Format to export the canvas to (png or jpeg)\n}\n```\n\n### gm export options\nFor the `gm` engine, the current output options are:\n```\n{\n  'format': 'png', // Format to export the canvas to (png or jpeg)\n  'quality': 75 // Quality of the output image\n}\n```\n\n### Available packing algorithms\nThe available packing algorithms are: `top-down`, `left-right`, `diagonal` (\\\\ format), `alt-diagonal` (/ format), `binary-tree` (best packing possible).\n\n### Adding new engines\nExample engines can be found in [src/engines](tree/master/src/engines).\n\nNew engines can be added via `Spritesmith.addEngine(name, engine);`.\n\nIf you decide to build a new engine, there are some utilities in [src/utils](tree/master/src/utils) which may be helpful.\n\n### Adding new packing algorithms\nAlgorithms are maintained inside of [twolfson/layout](https://github.com/twolfson/layout/). Example algorithms can be found in [twolfson/layout/lib/algorithms](https://github.com/twolfson/layout/tree/master/lib/algorithms).\n\nNew algorithms can be added via `Spritesmith.Layout.addAlgorithm(name, algorithm);`.\n\nExamples\n--------\n```\nvar sprites = ['sprite1.png', 'sprite2.jpg', 'sprite3.png'];\nspritesmith({'src': sprites}, function (err, result) {\n  result.image; // Binary string representation of image\n  result.coordinates; // Object mapping filename to {x, y, width, height} of image\n  result.properties; // Object with metadata about spritesheet {width, height}\n});\n```\n\nContributing\n------------\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via [grunt](https://github.com/gruntjs/grunt/) and test via `npm test`.\n\nLicense\n-------\nCopyright (c) 2012 Ensighten\n\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Ensighten/spritesmith/issues"
  },
  "homepage": "https://github.com/Ensighten/spritesmith",
  "_id": "spritesmith@0.9.0",
  "_from": "spritesmith@~0.9.0"
}
