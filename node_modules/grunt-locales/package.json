{
  "name": "grunt-locales",
  "version": "3.0.0",
  "title": "grunt locales",
  "description": "Update, build, import and export locales using grunt.",
  "keywords": [
    "grunt",
    "gruntplugin",
    "locales",
    "messageformat",
    "translation",
    "localization",
    "internationalization",
    "i18n",
    "L10n"
  ],
  "homepage": "https://github.com/blueimp/grunt-locales",
  "author": {
    "name": "Sebastian Tschan",
    "url": "https://blueimp.net"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/blueimp/grunt-locales.git"
  },
  "bugs": {
    "url": "https://github.com/blueimp/grunt-locales/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-copy": "~0.4.1",
    "grunt-contrib-nodeunit": "~0.2.2",
    "grunt-bump-build-git": "~1.0.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "dependencies": {
    "apricot": "0.0.6",
    "htmlparser": "~1.7.6",
    "html-minifier": "~0.5.4",
    "messageformat": "~0.1.6",
    "sanitizer": "~0.1.1",
    "csv": "~0.3.6"
  },
  "readme": "# grunt locales\n\n> Update, build, import and export locales using grunt.\n\n## Table of contents\n\n- [Getting Started](#getting-started)\n- [The locales task](#the-locales-task)\n  - [Overview](#overview)\n  - [Usage Examples](#usage-examples)\n    - [Setup](#setup)\n    - [Locales update](#locales-update)\n    - [Locales build](#locales-build)\n    - [Locales export](#locales-export)\n    - [Locales import](#locales-import)\n    - [Watch tasks](#watch-tasks)\n  - [Options](#options)\n    - [options.locales](#optionslocales)\n    - [options.localizeAttributes](#optionslocalizeattributes)\n    - [options.localeRegExp](#optionslocaleregexp)\n    - [options.localePlaceholder](#optionslocaleplaceholder)\n    - [options.localeName](#optionslocalename)\n    - [options.purgeLocales](#optionspurgelocales)\n    - [options.defaultMessagesSource](#optionsdefaultmessagessource)\n    - [options.messageFormatFile](#optionsmessageformatfile)\n    - [options.localeTemplate](#optionslocaletemplate)\n    - [options.htmlmin](#optionshtmlmin)\n    - [options.htmlminKeys](#optionshtmlminkeys)\n    - [options.jsonSpace](#optionsjsonspace)\n    - [options.jsonReplacer](#optionsjsonreplacer)\n    - [options.csvEncapsulator](#optionscsvencapsulator)\n    - [options.csvDelimiter](#optionscsvdelimiter)\n    - [options.csvLineEnd](#optionscsvlineend)\n    - [options.csvEscape](#optionscsvescape)\n    - [options.csvKeyLabel](#optionscsvkeylabel)\n    - [options.urlRegExp](#optionsurlregexp)\n- [HTML templates format](#html-templates-format)\n  - [Template examples](#template-examples)\n- [Translation functions](#translation-functions)\n  - [DOM replacement](#dom-replacement)\n  - [AngularJS directive](#angularjs-directive)\n- [Contributing](#contributing)\n- [Release History](#release-history)\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-locales --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-locales');\n```\n\n## The locales task\n\n### Overview\nThe goal of this grunt task is to automate localization of HTML templates.\n\nExecuting this task parses `localize` attributes in HTML files and collects the parsed locale strings in JSON files for translation. The translated JSON locale files are then compiled into JS locale files which provide a performant way to use the produced translation functions.\n\nThe JSON locale files can also be exported and imported to and from a CSV locale file to ease the translation process.\n\nTo support translation features like pluralization and gender selection, this project relies on Alex Sexton's [MessageFormat](https://github.com/SlexAxton/messageformat.js) library to parse the locale strings and compile the translation functions.\n\n### Usage Examples\n\n#### Setup\nIn your project's Gruntfile, add a section named `locales` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  locales: {\n    options: {\n      locales: ['en_US', 'de_DE']\n    },\n    update: {\n      src: 'templates/**/*.html',\n      dest: 'js/locales/{locale}/i18n.json'\n    },\n    build: {\n      src: 'js/locales/**/i18n.json',\n      dest: 'js/locales/{locale}/i18n.js'\n    },\n    'export': {\n      src: 'js/locales/**/i18n.json',\n      dest: 'js/locales/locales.csv'\n    },\n    'import': {\n      src: 'js/locales/locales.csv',\n      dest: 'js/locales/{locale}/i18n.json'\n    }\n  },\n})\n```\n\n#### Locales update\nParse the HTML template files and update the JSON locale files:\n\n```sh\ngrunt locales:update\n```\n\n#### Locales build\nParse the JSON locale files and build the JS locale files:\n\n```sh\ngrunt locales:build\n```\n\n#### Locales export\nExport the JSON locale files into one CSV export file:\n\n```sh\ngrunt locales:export\n```\n\n#### Locales import\nCreate (and overwrite) the JSON locale files from the CSV locales file:\n\n```sh\ngrunt locales:import\n```\n\n#### Watch tasks\nInstall [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch) to automatically update and build locales on file changes.\n\nIn your project's Gruntfile, add the following to your watch task configuration:\n\n```js\nwatch: {\n  templates: {\n    files: 'templates/**/*.html',\n    tasks: ['locales:update', 'locales:build'],\n    options: {\n      spawn: false,\n    }\n  },\n  locales: {\n    files: 'js/locales/**/i18n.json',\n    tasks: ['locales:build']\n  }\n}\n```\n\nAdd the following section to only parse changed HTML templates:\n\n```js\ngrunt.event.on('watch', function (action, file) {\n    grunt.config('locales.update.options.purgeLocales', false);\n    grunt.config('locales.update.src', file);\n});\n```\n\n### Options\n\n#### options.locales\nType: `Array`  \nDefault value: `['en_US']`\n\nThe list of locales you are using for your translation framework.\n\n#### options.localizeAttributes\nType: `Array`  \nDefault value: `['localize', 'localize-title', 'localize-page-title']`\n\nA list of attributes that are parsed for locale strings in the HTML templates.  \nAll attributes in this list will also match with attributes of the same name with `data-` prefix.  \nIf the attribute value is empty and the matched attribute is `localize` or `data-localize`, the parser takes the element HTML content as locale string.\n\n#### options.localeRegExp\nType `RegExp`  \nDefault value: `/\\w+(?=\\/[^\\/]+$)/`\n\nMatches the locale name in a file path, e.g. `en_US` in `js/locale/en_US/i18n.json`.  \nThis is used to automatically extract the locale name for the build and export tasks.\n\n#### options.localePlaceholder\nType: `String`  \nDefault value: `'{locale}'`\n\nThe placeholder for the locale name used to create the destination file paths.\n\n#### options.localeName\nType: `String`  \nDefault value: `'i18n'`\n\nThe name of the variable added to the `window` object in the created locale scripts.  \nThis variable holds the map of translation functions.\n\n#### options.purgeLocales\nType: `Boolean`  \nDefault value: `true`\n\nIf enabled, removes obsolete locale strings from the JSON files.  \nThis excludes strings parsed from the HTML templates and the default messages.\n\n#### options.defaultMessagesSource\nType: `String|Array`  \nDefault value: `undefined`\n\nThe source filepath(s) to the JSON file(s) with default locale strings not found in the HTML templates.  \nSupports filename expansion via [globbing patterns](http://gruntjs.com/configuring-tasks#globbing-patterns).\n\n#### options.messageFormatFile\nType: `String`  \nDefault value: `__dirname + '/../node_modules/messageformat/locale/{locale}.js'`\n\nThe location of the [MessageFormat](https://github.com/SlexAxton/messageformat.js) locale files.\n\n#### options.localeTemplate\nType: `String`  \nDefault value: `__dirname + '/../i18n.js.tmpl'`\n\nThe location of the template file used to render the JS locale files.\n\n#### options.htmlmin\nType: `Object`  \nDefault value: `{removeComments: true, collapseWhitespace: true}`\n\nMinifies locale strings containing HTML with [html-minifier](https://github.com/kangax/html-minifier), using the given options object.  \nSet to `false` to disable HTML minification.\n\n#### options.htmlminKeys\nType: `Boolean`  \nDefault value: `false`\n\nIf enabled, also minifies the parsed keys containing HTML markup.  \nThis option can be useful if the locales are parsed from the unminified templates, but the templates are later minified using [grunt-contrib-htmlmin](https://github.com/gruntjs/grunt-contrib-htmlmin).\n\n#### options.jsonSpace\nType: `Integer`  \nDefault value: `2`\n\nThe `space` parameter to [JSON.stringify](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) used to render the JSON locale files.\n\n#### options.jsonReplacer\nType: `function|Array`  \nDefault value: `undefined`\n\nThe `replacer` parameter to [JSON.stringify](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) used to render the JSON locale files.\n\n#### options.csvEncapsulator\nType: `String`  \nDefault value: `'\"'`\n\nThe string encapsulator character(s) used for the CSV export.\n\n#### options.csvDelimiter\nType: `String`  \nDefault value: `','`\n\nThe table cell delimiter character(s) used for the CSV export.\n\n#### options.csvLineEnd\nType: `String`  \nDefault value: `'\\r\\n'`\n\nThe line end character(s) used for the CSV export.\n\n#### options.csvEscape\nType: `Function`  \nDefault value:\n\n```js\nfunction (str) {\n  return str.replace(/\"/g, '\"\"');\n}\n```\n\nThe string escape function used for the CSV export.\n\n#### options.csvKeyLabel\nType: `String`  \nDefault value: `'ID'`\n\nThe label for the first cell created in the CSV export.\n\n#### options.urlRegExp\nType `RegExp`  \nDefault value: `/^((ftp|https?):\\/\\/|mailto:|#|\\{\\w+\\})/`\n\nThe allowed URL formats for the CSV import.\n\n## HTML templates format\nThe templates should contain HTML content which can be parsed by [node-htmlparser](https://github.com/tautologistics/node-htmlparser).\n\nBy default, the `locales:update` task parses all elements with `localize`, `localize-title` and `localize-page-title` attributes, as well as the same attributes with `-data` prefix. So elements with `data-localize`, `data-localize-title` and `data-localize-page-title` attribute will also be parsed, which allows strict HTML conformity.\n\nThe localization string is taken from the attribute value. For the attributes `localize` and `data-localize`, the string will be taken from the content of the element if the attribute value is empty.\n\n### Template examples\n\n```html\n<div data-name=\"Grunt\" data-localize>Hello {name}!</div>\n```\n\n```html\n<div localize-title=\"Hover over me!\" localize>Element with title!</div>\n```\n\n## Translation functions\nThe compiled translation functions can be used the following way:\n\n```js\nvar translatedString = i18n['Hello {name}!']({name: 'Grunt'});\n```\n\n### DOM replacement\nAn example replacing the content of all HTML nodes of the current document with `data-localize` attribute with their translation function result:\n\n```js\n[].forEach.call(document.querySelectorAll('[data-localize]'), function (node) {\n    var func = window.i18n[node.getAttribute('data-localize') || node.innerHTML];\n    if (func) {\n        node.innerHTML = func({name: escapeHTML(node.getAttribute('data-name'))});\n    }\n});\n```\nPlease note that when you are dynamically updating HTML content, you have to safeguard against [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting) attacks.\n\nA safe way is to filter all arguments passed to the translation functions, based on the context where the translation result will be inserted.\n\nArguments for translation functions which will be inserted as HTML element content can be safely escaped by replacing unsafe characters with their HTML entity equivalents, e.g. with the following function:\n\n```js\nfunction escapeHTML(str) {\n    return str.replace(/[<>&\"]/g, function (c) {\n        return {\n            '<' : '&lt;',\n            '>' : '&gt;',\n            '&' : '&amp;',\n            '\"' : '&quot;'\n        }[c] || '';\n    });\n}\n```\n\n### AngularJS directive\nA sample `localize` [AngularJS](http://angularjs.org/) directive:\n\n```js\nangular.module('localize', ['ngSanitize']).directive('localize', [\n    '$window', '$sanitize',\n    function ($window, $sanitize) {\n        return function (scope, elm, attrs) {\n            // Take the translation key from the element content,\n            // if the localize attribute is empty:\n            if (!attrs.localize) {\n                attrs.$set('localize', elm.html());\n            }\n            var func = $window.i18n[attrs.localize];\n            if (func) {\n                // Call the translation function with the\n                // data-attributes of the element as argument object:\n                elm.html($sanitize(func(elm.data())));\n            }\n        };\n    }\n]);\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n * 2013-11-20   v3.0.0   Accept [globbing patterns](http://gruntjs.com/configuring-tasks#globbing-patterns) with the new `defaultMessagesSource` option, replacing `defaultMessagesFile`.\n * 2013-10-30   v2.0.0   Sanitize both keys and content, minify HTML output.\n * 2013-10-30   v1.1.0   Catch, format and log errors when parsing JSON locale files.\n * 2013-10-29   v1.0.0   Initial release.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-locales@3.0.0",
  "dist": {
    "shasum": "7c8b63021c30ee7d9a5ce5fed382926d098f6743"
  },
  "_from": "grunt-locales@~3.0.0",
  "_resolved": "https://registry.npmjs.org/grunt-locales/-/grunt-locales-3.0.0.tgz"
}
